
using Autofac;
using Autofac.Extras.DynamicProxy;
using Business.Abstract;
using Business.Concrete;
using Castle.DynamicProxy;
using Core.Utilities.Interceptors;
using DataAccess.Abstract;
using DataAccess.Concrete.EntityFramework;

namespace Business.DependencyResolvers.AutoFac;

public class AutoFacBusinsessModule : Module
{
    protected override void Load(ContainerBuilder builder)
    {
        builder.RegisterType<ProductManager>().As<IProductService>().SingleInstance();
        builder.RegisterType<EfProductDal>().As<IProductDal>().SingleInstance();
        
        builder.RegisterType<CategoryManager>().As<ICategoryService>().SingleInstance();
        builder.RegisterType<EfCategoryDal>().As<ICategoryDal>().SingleInstance();
        


        var assembly = System.Reflection.Assembly.GetExecutingAssembly();
            builder.RegisterAssemblyTypes(assembly).AsImplementedInterfaces()
                .EnableInterfaceInterceptors(new ProxyGenerationOptions()
                {
                    Selector = new AspectInterceptorSelector()
                }).SingleInstance();
 
    }


}



// DEPENDENCY INJECTÄ°ON
// //ğŸ’¡ Bu YapÄ± Ne Ä°ÅŸe YarÄ±yor?
// 	1.	Nesne baÄŸÄ±mlÄ±lÄ±klarÄ±nÄ± yÃ¶netiyor:
// 	â€¢	Normalde, ProductManager nesnesinin IProductService olarak kullanÄ±lmasÄ±nÄ± istiyoruz.
// 	â€¢	EfProductDal nesnesinin de IProductDal olarak enjekte edilmesini saÄŸlÄ±yoruz.
// 	2.	BaÄŸÄ±mlÄ±lÄ±klarÄ± manuel oluÅŸturmak yerine otomatik baÄŸlÄ±yor:
// 	â€¢	EÄŸer Autofac kullanmasaydÄ±k, ProductManager nesnesini her yerde new ile oluÅŸturmamÄ±z gerekecekti: